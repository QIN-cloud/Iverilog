#define yy_create_buffer VL_create_buffer
#define yy_delete_buffer VL_delete_buffer
#define yy_scan_buffer VL_scan_buffer
#define yy_scan_string VL_scan_string
#define yy_scan_bytes VL_scan_bytes
#define yy_flex_debug VL_flex_debug
#define yy_init_buffer VL_init_buffer
#define yy_flush_buffer VL_flush_buffer
#define yy_load_buffer_state VL_load_buffer_state
#define yy_switch_to_buffer VL_switch_to_buffer
#define yyin VLin
#define yyleng VLleng
#define yylex VLlex
#define yyout VLout
#define yyrestart VLrestart
#define yytext VLtext
#define yywrap VLwrap

#line 20 "lexor.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 103
#define YY_END_OF_BUFFER 104
static yyconst short int yy_accept[458] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   77,   77,  104,  102,    3,    4,   37,   38,
       37,  102,   37,  102,   37,   37,   37,   37,   37,   73,
       37,   37,   37,   66,  102,   37,  102,   37,   37,    3,
       37,  102,    9,   10,    9,  103,    6,    7,   42,   40,
       41,   42,   37,   37,   37,   65,   37,   57,   60,   59,
       58,   63,   64,   61,   62,   77,   78,   23,   68,   27,
        0,    0,    0,    0,    0,   12,   13,   21,   34,   35,
       33,    8,    5,    0,   73,    0,   14,   18,   22,   20,
       19,   16,   66,   67,   31,  101,   26,   32,   30,   29,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   11,   39,    0,    0,    0,    0,
        0,   77,   25,   28,    0,   70,    0,   69,    0,   72,
        0,   71,    0,   36,    5,   74,    0,   75,   15,   24,
       17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   69,   74,    0,   75,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   47,   50,

       48,   51,   53,   52,   43,   44,   46,   45,   54,   55,
       56,   49,    0,   74,    0,    0,    0,    0,    0,    0,
       96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   74,    0,    0,
        0,    0,    0,    0,   96,   96,    0,    0,   97,    0,
       98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      100,    0,    0,    0,    0,   95,    0,    0,    0,    0,
       97,   97,    0,   98,   98,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  100,  100,   94,    0,    0,    0,
        0,   95,   95,    0,    0,    0,    0,    0,   99,    0,

        0,    0,   90,    0,    0,    0,    0,   94,   94,    0,
        0,    0,    0,    0,    0,    0,    0,   99,   99,    0,
        0,    0,   90,   90,   91,    0,    0,    0,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    2,    0,    0,
       91,   91,    0,   76,    0,    1,    1,   79,    0,    0,
        0,    0,    0,   87,    2,    0,    0,    0,    0,   79,
       79,    0,    0,    0,    0,    0,   87,   87,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   86,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       86,   86,    0,    0,    0,    0,   80,    0,   83,   82,
        0,    0,    0,    0,   92,    0,   80,   80,    0,   83,
       83,   82,   82,    0,    0,    0,    0,   92,   92,    0,
        0,    0,   85,   88,    0,   93,    0,   84,   85,   85,
       88,   88,    0,   93,   93,    0,   84,   84,   89,    0,
       89,   89,    0,   81,   81,   81,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   10,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   10,   25,
       26,   27,   28,   10,   29,   30,   29,   31,   32,   33,
       34,   35,   34,   34,   34,   36,   34,   37,   38,   39,
       34,   40,   41,   34,   34,   34,   34,   42,   34,   43,
       10,   44,   10,   45,   46,   47,   48,   49,   50,   51,

       52,   53,   34,   54,   55,   34,   34,   56,   57,   58,
       59,   60,   34,   61,   62,   63,   64,   65,   34,   42,
       66,   43,   10,   67,   10,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[69] =
    {   0,
        1,    2,    3,    4,    3,    1,    1,    1,    5,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    6,
        6,    6,    6,    1,    1,    1,    1,    7,    6,    6,
        6,    6,    6,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    6,    1,    1,    6,    1,    6,    6,    6,
        6,    6,    6,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    1
    } ;

static yyconst short int yy_base[495] =
    {   0,
        0,   67,   67,   69,    0,    0, 1002, 1001,   72,   73,
      105,   83, 1000,  999, 1002, 1007, 1007, 1007,  975, 1007,
     1007,    0,  989,   70,  984,   60,  974,   54,   74,  128,
       69,   70,   72,    0,    0,  929,  101,  929,  112,  134,
      939,  180, 1007, 1007,  975, 1007, 1007, 1007, 1007, 1007,
     1007,  986,  147,   88,   83,  170, 1007,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1007,  966,    0,  980,
      166,  198,   87,  234,  175,  150, 1007, 1007, 1007, 1007,
     1007, 1007,    0,  177,  227,  244,  965, 1007,  963, 1007,
     1007,  961,    0,    0, 1007,  212, 1007, 1007, 1007, 1007,

      266,  231,  932,  934,   57,  114,  120,  930,  925,  922,
      930,  917,  925,   69, 1007, 1007,  183,  268,  277,  156,
      937,    0, 1007, 1007,  296,  283,  325,  286,  248,  267,
      315,  331,  361, 1007,    0,  347,  360,  364, 1007, 1007,
     1007,  925,  165,  919,  920,  222,  913,  912,  236,  922,
      922,  913,  238,  911,  907,  908,  910,  207,  914,  951,
      950,  949,  948,  947,  946,  945,  944,  943,  942,  941,
      940,  939,  938,  368,  374,  395,  381,  901,  898,  893,
      266,  900,  899,  894,  896,  294,  892,  887,  890,  877,
      882,  876,  886,  877,  884,  876,  882,  877, 1007, 1007,

     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007,  401,  408,  927,  880,  866,  871,  862,  878,
      430,  870,  873,  871,  862,  869,  857,  915,  859,  868,
      865,  853,  854,  852,  855,  859,  856,  416,  326,  858,
      853,  856,  861,  850,    0,  438,  853,  848,  442,  844,
      446,  851,  437,  841,  841,  849,  850,  845,  846,  837,
      450,  845,  886,  839,  828,  461,  833,  837,  842,  831,
        0,  465,  823,    0,  469,  833,  456,  823,  822,  810,
      810,  797,  804,  793,    0,  478,  482,  831,  826,  769,
      771,    0,  486,  751,  757,  736,  738,  730,  490,  355,

      723,  703,  494,  698,  685,  684,  676,    0,  498,  485,
      661,  654,  654,  638,  633,  639,  636,    0,  507,  672,
      616,  625,    0,  511,  515,  589,  579,  564,  501,  571,
      567,  563,  552,  546,  550,  536,  588,    0,  529,  537,
        0,  523,  530, 1007,  527,    0,  509,  531,  512,  525,
      506,  500,  504,  535,    0,  509,  488,  499,  492,    0,
      539,  476,  349,  472,  474,  461,    0,  543,  462,  459,
      440,  456,  432,  439,  438,  424,  422,  425,  417,  417,
      405,  394,  395,  374,  363,  356,  353,  359,  341,  547,
      334,  346,  315,  315,  320,  308,  311,  293,  291,  294,

        0,  551,  285,  289,  272,  272,  555,  262,  559,  563,
      266,  252,  249,  229,  567,  220,    0,  571,  219,    0,
      575,    0,  579,  200,  190,  184,  178,    0,  583,  176,
      158,  133,  587,  591,   91,  595,   79,  599,    0,  603,
        0,  607,   82,    0,  611,   65,    0,  615,  619,   61,
        0,  623,   32,  627,    0,  631, 1007,  636,  643,  650,
      657,  664,  667,  669,  675,  682,  687,  694,  701,  708,
      715,  722,  729,  736,  743,  750,  757,  764,  771,  778,
      785,  792,  799,  806,  813,  820,  827,  834,  841,  848,
      855,  862,  869,  876

    } ;

static yyconst short int yy_def[495] =
    {   0,
      457,    1,  458,  458,  459,  459,  460,  460,  461,  461,
        1,   11,  462,  462,  457,  457,  457,  457,  457,  457,
      457,  463,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  464,  465,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  464,  464,  464,
      464,  464,  464,  464,  464,  466,  457,  457,  463,  457,
      457,  457,  467,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  468,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  464,  465,  457,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  466,  457,  457,  457,  457,  457,  457,  467,  467,
      457,  457,  457,  457,  468,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      469,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  469,  469,  457,  457,  470,  457,
      471,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      472,  457,  473,  457,  457,  474,  457,  457,  457,  457,
      470,  470,  457,  471,  471,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  472,  472,  475,  473,  457,  457,
      457,  474,  474,  457,  457,  457,  457,  457,  476,  457,

      457,  457,  477,  457,  457,  457,  457,  475,  475,  457,
      457,  457,  457,  457,  457,  457,  457,  476,  476,  478,
      457,  457,  477,  477,  479,  457,  457,  457,  480,  457,
      457,  457,  457,  457,  457,  457,  478,  481,  457,  457,
      479,  479,  457,  457,  457,  480,  480,  482,  457,  457,
      457,  457,  457,  483,  481,  457,  457,  457,  457,  482,
      482,  457,  457,  457,  457,  457,  483,  483,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  484,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,

      484,  484,  457,  457,  457,  457,  485,  457,  486,  487,
      457,  457,  457,  457,  488,  457,  485,  485,  457,  486,
      486,  487,  487,  457,  457,  457,  457,  488,  488,  457,
      457,  457,  489,  490,  457,  491,  457,  492,  489,  489,
      490,  490,  457,  491,  491,  457,  492,  492,  493,  457,
      493,  493,  457,  494,  494,  494,    0,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457

    } ;

static yyconst short int yy_nxt[1076] =
    {   0,
       16,   17,   17,   18,   17,   19,   20,   21,   22,   21,
       23,   24,   25,   21,   26,   27,   28,   21,   29,   30,
       30,   30,   30,   21,   31,   32,   33,   21,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   35,   36,   34,   37,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   38,   39,   40,   40,
       44,   40,   44,   77,   41,   50,   50,   80,   51,   51,
       81,   45,  454,   45,   40,   40,   78,   40,   82,  129,
       41,  129,   83,   87,   88,   89,   90,   91,   92,   71,

       72,   77,   96,   96,   73,   96,   80,   74,  146,   81,
       75,  147,  453,   42,   78,   52,   52,   53,   71,   54,
       72,   55,   98,   73,   56,   56,  158,  450,   74,   42,
      159,   75,   57,  449,   58,  101,  101,   59,  101,   60,
       61,   62,  446,   63,   64,   84,   65,   85,   85,   85,
       85,  133,  133,   58,  133,  443,   99,   59,   60,   86,
       61,   76,   62,  134,   63,   64,  117,  118,  125,  148,
      125,  149,  150,   85,  119,  170,  171,  151,  100,   86,
      102,   96,   96,  172,   96,  126,  126,   84,  120,   85,
       85,   85,   85,  126,  438,  121,  136,  136,  136,  136,

      127,   86,  127,  160,   71,   72,  437,  126,  126,   73,
      161,  126,   74,   96,   96,   85,   96,  128,  128,  128,
      128,   86,  178,   71,  162,   72,  159,  436,   73,  104,
      105,  106,  435,   74,  107,  108,  131,  109,  131,  110,
      111,  112,  113,  114,   84,  434,   85,   85,   85,   85,
      129,  433,  129,  132,  132,  132,  196,  197,   86,  137,
      137,  132,  432,  138,  138,  138,  138,  101,  101,  457,
      101,  457,   85,  431,  181,  132,  132,  182,   86,  132,
      104,  105,  106,  185,  430,  142,  186,  163,  109,  427,
      110,  111,  112,  113,  143,  164,  166,  167,  125,  190,

      125,  191,  126,  126,  168,  174,  174,  174,  174,  165,
      126,  426,  102,  217,  425,  126,  126,  131,  169,  131,
      218,  424,  419,  126,  126,  126,  416,  127,  126,  127,
      239,  174,  263,  415,  132,  132,  132,  126,  126,  414,
      413,  126,  132,  223,  128,  128,  128,  128,  224,  412,
      132,  132,  132,  225,  411,  410,  132,  132,  132,  300,
      132,  320,  133,  133,  409,  133,  175,  175,  175,  175,
      408,  407,  132,  132,  134,  406,  132,  405,  176,  138,
      138,  138,  138,  177,  177,  177,  177,  174,  174,  174,
      174,  404,  175,  175,  175,  175,  175,  403,  176,  374,

      177,  177,  177,  177,  400,  176,  399,  398,  375,  177,
      213,  213,  376,  174,  214,  214,  214,  214,  397,  175,
      214,  214,  214,  214,  396,  176,  177,  238,  238,  238,
      238,  246,  246,  395,  246,  238,  238,  238,  238,  246,
      246,  253,  246,  272,  272,  394,  272,  275,  275,  393,
      275,  286,  286,  238,  286,  392,  277,  277,  277,  277,
      300,  238,  293,  293,  391,  293,  272,  272,  390,  272,
      275,  275,  389,  275,  388,  277,  277,  277,  277,  286,
      286,  387,  286,  309,  309,  386,  309,  293,  293,  310,
      293,  319,  319,  385,  319,  324,  324,  384,  324,  309,

      309,  383,  309,  382,  329,  329,  329,  329,  319,  319,
      381,  319,  324,  324,  380,  324,  342,  342,  379,  342,
      347,  347,  347,  347,  342,  342,  378,  342,  347,  347,
      347,  347,  361,  361,  377,  361,  368,  368,  373,  368,
      361,  361,  372,  361,  368,  368,  371,  368,  402,  402,
      370,  402,  402,  402,  369,  402,  418,  418,  366,  418,
      421,  421,  365,  421,  423,  423,  364,  423,  429,  429,
      363,  429,  418,  418,  362,  418,  421,  421,  359,  421,
      423,  423,  358,  423,  429,  429,  357,  429,  440,  440,
      356,  440,  442,  442,  338,  442,  445,  445,  354,  445,

      448,  448,  353,  448,  440,  440,  352,  440,  442,  442,
      351,  442,  445,  445,  350,  445,  448,  448,  349,  448,
      452,  452,  348,  452,  452,  452,  345,  452,  456,  456,
      344,  456,  456,  456,  343,  456,   43,   43,   43,   43,
       43,   43,   43,   46,   46,   46,   46,   46,   46,   46,
       47,   47,   47,   47,   47,   47,   47,   49,   49,   49,
       49,   49,   49,   49,   66,   66,   66,   66,   66,   66,
       66,   69,   69,   93,   93,   94,  340,  339,  338,   94,
       94,   94,  122,  122,  122,  336,  122,  122,  122,  130,
      335,  334,  130,  130,  135,  135,  135,  333,  135,  135,

      135,  245,  245,  245,  332,  245,  245,  245,  271,  271,
      271,  331,  271,  271,  271,  274,  274,  274,  330,  274,
      274,  274,  285,  285,  285,  328,  285,  285,  285,  288,
      288,  288,  288,  288,  288,  288,  292,  292,  292,  327,
      292,  292,  292,  308,  308,  308,  326,  308,  308,  308,
      318,  318,  318,  325,  318,  318,  318,  323,  323,  323,
      322,  323,  323,  323,  337,  337,  337,  337,  337,  337,
      337,  341,  341,  341,  321,  341,  341,  341,  346,  346,
      346,  317,  346,  346,  346,  355,  355,  355,  316,  355,
      355,  355,  360,  360,  360,  315,  360,  360,  360,  367,

      367,  367,  314,  367,  367,  367,  401,  401,  401,  313,
      401,  401,  401,  417,  417,  417,  312,  417,  417,  417,
      420,  420,  420,  311,  420,  420,  420,  422,  422,  422,
      310,  422,  422,  422,  428,  428,  428,  289,  428,  428,
      428,  439,  439,  439,  307,  439,  439,  439,  441,  441,
      441,  306,  441,  441,  441,  444,  444,  444,  305,  444,
      444,  444,  447,  447,  447,  304,  447,  447,  447,  451,
      451,  451,  303,  451,  451,  451,  455,  455,  455,  302,
      455,  455,  455,  301,  299,  298,  297,  296,  295,  294,
      291,  290,  289,  287,  284,  283,  282,  281,  280,  279,

      278,  276,  273,  270,  269,  268,  267,  266,  265,  264,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  247,  244,  243,  242,  241,
      240,  239,  237,  236,  235,  234,  233,  232,  231,  230,
      229,  228,  227,  226,  222,  221,  220,  219,  216,  215,
      196,  212,  211,  210,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  199,  198,  195,  194,  193,  192,
      189,  188,  187,  184,  183,  180,  179,  150,  173,  157,
      156,  155,  154,  153,  152,  145,  144,  141,  140,  139,
      124,  123,  116,  115,  103,   97,   95,   79,   76,   70,

       68,  457,   67,   67,   48,   48,   15,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457
    } ;

static yyconst short int yy_chk[1076] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
        3,    2,    4,   26,    2,    9,   10,   28,    9,   10,
       28,    3,  453,    4,   12,   12,   26,   12,   29,   73,
       12,   73,   29,   31,   31,   32,   32,   33,   33,   24,

       24,   54,   37,   37,   24,   37,   55,   24,  105,   55,
       24,  105,  450,    2,   54,    9,   10,   11,   24,   11,
       24,   11,   39,   24,   11,   11,  114,  446,   24,   12,
      114,   24,   11,  443,   11,   40,   40,   11,   40,   11,
       11,   11,  437,   11,   11,   30,   11,   30,   30,   30,
       30,   76,   76,   11,   76,  435,   39,   11,   11,   30,
       11,   53,   11,   76,   11,   11,   53,   53,   71,  106,
       71,  106,  107,   30,   53,  120,  120,  107,   39,   30,
       40,   42,   42,  120,   42,   71,   71,   56,   53,   56,
       56,   56,   56,   71,  432,   53,   84,   84,   84,   84,

       72,   56,   72,  117,   75,   75,  431,   71,   71,   75,
      117,   71,   75,   96,   96,   56,   96,   72,   72,   72,
       72,   56,  143,   75,  117,   75,  143,  430,   75,   42,
       42,   42,  427,   75,   42,   42,   74,   42,   74,   42,
       42,   42,   42,   42,   85,  426,   85,   85,   85,   85,
      129,  425,  129,   74,   74,   74,  158,  158,   85,   86,
       86,   74,  424,   86,   86,   86,   86,  101,  101,  130,
      101,  130,   85,  419,  146,   74,   74,  146,   85,   74,
      102,  102,  102,  149,  416,  102,  149,  118,  102,  414,
      102,  102,  102,  102,  102,  118,  119,  119,  125,  153,

      125,  153,  126,  126,  119,  128,  128,  128,  128,  118,
      126,  413,  101,  181,  412,  125,  125,  131,  119,  131,
      181,  411,  408,  125,  126,  126,  406,  127,  126,  127,
      239,  128,  239,  405,  131,  131,  131,  125,  125,  404,
      403,  125,  131,  186,  127,  127,  127,  127,  186,  400,
      132,  132,  132,  186,  399,  398,  131,  131,  132,  300,
      131,  300,  133,  133,  397,  133,  136,  136,  136,  136,
      396,  395,  132,  132,  133,  394,  132,  393,  136,  137,
      137,  137,  137,  138,  138,  138,  138,  174,  174,  174,
      174,  392,  136,  175,  175,  175,  175,  391,  136,  363,

      177,  177,  177,  177,  389,  175,  388,  387,  363,  138,
      176,  176,  363,  174,  176,  176,  176,  176,  386,  175,
      213,  213,  213,  213,  385,  175,  177,  214,  214,  214,
      214,  221,  221,  384,  221,  238,  238,  238,  238,  246,
      246,  253,  246,  249,  249,  383,  249,  251,  251,  382,
      251,  261,  261,  214,  261,  381,  253,  253,  253,  253,
      277,  238,  266,  266,  380,  266,  272,  272,  379,  272,
      275,  275,  378,  275,  377,  277,  277,  277,  277,  286,
      286,  376,  286,  287,  287,  375,  287,  293,  293,  310,
      293,  299,  299,  374,  299,  303,  303,  373,  303,  309,

      309,  372,  309,  371,  310,  310,  310,  310,  319,  319,
      370,  319,  324,  324,  369,  324,  325,  325,  366,  325,
      329,  329,  329,  329,  342,  342,  365,  342,  347,  347,
      347,  347,  348,  348,  364,  348,  354,  354,  362,  354,
      361,  361,  359,  361,  368,  368,  358,  368,  390,  390,
      357,  390,  402,  402,  356,  402,  407,  407,  353,  407,
      409,  409,  352,  409,  410,  410,  351,  410,  415,  415,
      350,  415,  418,  418,  349,  418,  421,  421,  345,  421,
      423,  423,  343,  423,  429,  429,  340,  429,  433,  433,
      339,  433,  434,  434,  337,  434,  436,  436,  336,  436,

      438,  438,  335,  438,  440,  440,  334,  440,  442,  442,
      333,  442,  445,  445,  332,  445,  448,  448,  331,  448,
      449,  449,  330,  449,  452,  452,  328,  452,  454,  454,
      327,  454,  456,  456,  326,  456,  458,  458,  458,  458,
      458,  458,  458,  459,  459,  459,  459,  459,  459,  459,
      460,  460,  460,  460,  460,  460,  460,  461,  461,  461,
      461,  461,  461,  461,  462,  462,  462,  462,  462,  462,
      462,  463,  463,  464,  464,  465,  322,  321,  320,  465,
      465,  465,  466,  466,  466,  317,  466,  466,  466,  467,
      316,  315,  467,  467,  468,  468,  468,  314,  468,  468,

      468,  469,  469,  469,  313,  469,  469,  469,  470,  470,
      470,  312,  470,  470,  470,  471,  471,  471,  311,  471,
      471,  471,  472,  472,  472,  307,  472,  472,  472,  473,
      473,  473,  473,  473,  473,  473,  474,  474,  474,  306,
      474,  474,  474,  475,  475,  475,  305,  475,  475,  475,
      476,  476,  476,  304,  476,  476,  476,  477,  477,  477,
      302,  477,  477,  477,  478,  478,  478,  478,  478,  478,
      478,  479,  479,  479,  301,  479,  479,  479,  480,  480,
      480,  298,  480,  480,  480,  481,  481,  481,  297,  481,
      481,  481,  482,  482,  482,  296,  482,  482,  482,  483,

      483,  483,  295,  483,  483,  483,  484,  484,  484,  294,
      484,  484,  484,  485,  485,  485,  291,  485,  485,  485,
      486,  486,  486,  290,  486,  486,  486,  487,  487,  487,
      289,  487,  487,  487,  488,  488,  488,  288,  488,  488,
      488,  489,  489,  489,  284,  489,  489,  489,  490,  490,
      490,  283,  490,  490,  490,  491,  491,  491,  282,  491,
      491,  491,  492,  492,  492,  281,  492,  492,  492,  493,
      493,  493,  280,  493,  493,  493,  494,  494,  494,  279,
      494,  494,  494,  278,  276,  273,  270,  269,  268,  267,
      265,  264,  263,  262,  260,  259,  258,  257,  256,  255,

      254,  252,  250,  248,  247,  244,  243,  242,  241,  240,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  220,  219,  218,  217,
      216,  215,  198,  197,  196,  195,  194,  193,  192,  191,
      190,  189,  188,  187,  185,  184,  183,  182,  180,  179,
      178,  173,  172,  171,  170,  169,  168,  167,  166,  165,
      164,  163,  162,  161,  160,  159,  157,  156,  155,  154,
      152,  151,  150,  148,  147,  145,  144,  142,  121,  113,
      112,  111,  110,  109,  108,  104,  103,   92,   89,   87,
       70,   68,   52,   45,   41,   38,   36,   27,   25,   23,

       19,   15,   14,   13,    8,    7,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexor.lex"
#define INITIAL 0
#line 3 "lexor.lex"
#include <iostream>
#include "parse_misc.h"
#include "pform.h"
#include "parse.h"
#include "parse_api.h"
#include "compiler.h"
#include <ctype.h>
#include <string.h>
#include "lexor_keyword.h"


#define YY_USER_INIT reset_lexor();
#define yylval VLlval

/*
 * Lexical location information is passed in the yylloc variable to th
 * parser. The file names, strings, are kept in a list so that I can
 * re-use them. The set_file_name function will return a pointer to
 * the name as it exists in the list (and delete the passed string.)
 * If the name is new, it will be added to the list.
 */
extern YYLTYPE yylloc;

struct file_name_cell {
      const char*text;
      struct file_name_cell*next;
};

static struct file_name_cell*file_names = 0;

static const char* set_file_name(char*text)
{
      struct file_name_cell*cur = file_names;
      while (cur) {
	    if (strcmp(cur->text, text) == 0) {
		  delete[]text;
		  return cur->text;
	    }

	    cur = cur->next;
      }

      cur = new struct file_name_cell;
      cur->text = text;
      cur->next = file_names;
      return text;
}

extern void pform_set_timescale(int, int, const char*file, unsigned line);

void reset_lexor();
static void line_directive();
static void line_directive2();

static verinum*make_unsized_binary(const char*txt);
static verinum*make_unsized_dec(const char*txt);
static verinum*make_unsized_octal(const char*txt);
static verinum*make_unsized_hex(const char*txt);

static int dec_buf_div2(char *buf);

static void process_timescale(const char*txt);

static int comment_enter;
#define YY_NEVER_INTERACTIVE 1
#define CCOMMENT 1

#define PCOMMENT 2

#define LCOMMENT 3

#define CSTRING 4

#define UDPTABLE 5

#define PPTIMESCALE 6

#line 860 "lexor.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 79 "lexor.lex"


#line 1017 "lexor.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 458 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1007 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 81 "lexor.lex"
{ line_directive(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 82 "lexor.lex"
{ line_directive2(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 84 "lexor.lex"
{ ; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 85 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
/* C++ style comments start with / / and run to the ene of the
     current line. These are very easy to handle. */
case 5:
YY_RULE_SETUP
#line 90 "lexor.lex"
{ comment_enter = YY_START; BEGIN(LCOMMENT); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 91 "lexor.lex"
{ yymore(); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 92 "lexor.lex"
{ yylloc.first_line += 1; BEGIN(comment_enter); }
	YY_BREAK
/* The contents of C-style comments are ignored, like white space. */
case 8:
YY_RULE_SETUP
#line 97 "lexor.lex"
{ comment_enter = YY_START; BEGIN(CCOMMENT); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 98 "lexor.lex"
{ yymore(); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 99 "lexor.lex"
{ yylloc.first_line += 1; yymore(); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 100 "lexor.lex"
{ BEGIN(comment_enter); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 103 "lexor.lex"
{ return K_PSTAR; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "lexor.lex"
{ return K_STARP; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 105 "lexor.lex"
{ return K_LS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 106 "lexor.lex"
{ return K_LS; /* Note: Functionally, <<< is the same as <<. */}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 107 "lexor.lex"
{ return K_RS; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 108 "lexor.lex"
{ return K_RSS; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 109 "lexor.lex"
{ return K_LE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 110 "lexor.lex"
{ return K_GE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 111 "lexor.lex"
{ return K_EG; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 112 "lexor.lex"
{ return K_SG; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 113 "lexor.lex"
{ return K_EQ; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 114 "lexor.lex"
{ return K_NE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 115 "lexor.lex"
{ return K_CEQ; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 116 "lexor.lex"
{ return K_CNE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 117 "lexor.lex"
{ return K_LOR; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 118 "lexor.lex"
{ return K_LAND; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 119 "lexor.lex"
{ return K_TAND; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 120 "lexor.lex"
{ return K_NOR; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 121 "lexor.lex"
{ return K_NXOR; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "lexor.lex"
{ return K_NXOR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 123 "lexor.lex"
{ return K_NAND; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 124 "lexor.lex"
{ return K_TRIGGER; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 125 "lexor.lex"
{ return K_PO_POS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 126 "lexor.lex"
{ return K_PO_NEG; }
	YY_BREAK
/* Watch out for the tricky case of (*). Cannot parse this as "(*"
     and ")", but since I know that this is really ( * ), replace it
     with "*" and return that. */
case 36:
YY_RULE_SETUP
#line 131 "lexor.lex"
{ return '*'; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 133 "lexor.lex"
{ return yytext[0]; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 135 "lexor.lex"
{ BEGIN(CSTRING); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 136 "lexor.lex"
{ yymore(); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 137 "lexor.lex"
{ BEGIN(0);
                yylval.text = strdup(yytext);
		VLerror(yylloc, "Missing close quote of string.");
		yylloc.first_line += 1;
		return STRING; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 142 "lexor.lex"
{ BEGIN(0);
                yylval.text = strdup(yytext);
		yylval.text[strlen(yytext)-1] = 0;
		return STRING; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 146 "lexor.lex"
{ yymore(); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 148 "lexor.lex"
{ return '_'; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 149 "lexor.lex"
{ return '+'; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 150 "lexor.lex"
{ return '%'; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 151 "lexor.lex"
{ return '*'; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 152 "lexor.lex"
{ return 'r'; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 153 "lexor.lex"
{ return 'Q'; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 154 "lexor.lex"
{ return 'q'; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 155 "lexor.lex"
{ return 'P'; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 156 "lexor.lex"
{ return 'f'; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 157 "lexor.lex"
{ return 'M'; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 158 "lexor.lex"
{ return 'N'; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 159 "lexor.lex"
{ return 'F'; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 160 "lexor.lex"
{ return 'R'; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 161 "lexor.lex"
{ return 'B'; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 162 "lexor.lex"
{ return 'b'; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 163 "lexor.lex"
{ return 'l'; /* IVL extension */ }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 164 "lexor.lex"
{ return 'h'; /* IVL extension */ }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 165 "lexor.lex"
{ return 'f'; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 166 "lexor.lex"
{ return 'r'; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 167 "lexor.lex"
{ return 'x'; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 168 "lexor.lex"
{ return 'n'; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 169 "lexor.lex"
{ return 'p'; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 170 "lexor.lex"
{ return yytext[0]; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 172 "lexor.lex"
{
      int rc = lexor_keyword_code(yytext, yyleng);
      if (rc == IDENTIFIER) {
	    yylval.text = strdup(yytext);
	    if (strncmp(yylval.text,"PATHPULSE$", 10) == 0)
		  rc = PATHPULSE_IDENTIFIER;
      } else {
	    yylval.text = 0;
      }

      return rc;
 }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 186 "lexor.lex"
{
      yylval.text = strdup(yytext+1);
      return IDENTIFIER; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 190 "lexor.lex"
{
      if (strcmp(yytext,"$setuphold") == 0)
	    return K_Ssetuphold;
      if (strcmp(yytext,"$attribute") == 0)
	    return KK_attribute;
      if (strcmp(yytext,"$hold") == 0)
	    return K_Shold;
      if (strcmp(yytext,"$period") == 0)
	    return K_Speriod;
      if (strcmp(yytext,"$recovery") == 0)
	    return K_Srecovery;
	  if (strcmp(yytext,"$recrem") == 0)
	    return K_Srecrem;
      if (strcmp(yytext,"$setup") == 0)
	    return K_Ssetup;
      if (strcmp(yytext,"$width") == 0)
	    return K_Swidth;
      yylval.text = strdup(yytext);
      return SYSTEM_IDENTIFIER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 211 "lexor.lex"
{ yylval.number = make_unsized_dec(yytext);
                            return BASED_NUMBER; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 213 "lexor.lex"
{ yylval.number = make_unsized_binary(yytext);
                        return BASED_NUMBER; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 215 "lexor.lex"
{ yylval.number = make_unsized_octal(yytext);
                        return BASED_NUMBER; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 217 "lexor.lex"
{ yylval.number = make_unsized_hex(yytext);
                              return BASED_NUMBER; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 220 "lexor.lex"
{
      yylval.number = make_unsized_dec(yytext);
      return DEC_NUMBER; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 224 "lexor.lex"
{
      yylval.realtime = new verireal(yytext);
      return REALTIME; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 228 "lexor.lex"
{
      yylval.realtime = new verireal(yytext);
      return REALTIME; }
	YY_BREAK
/* Notice and handle the timescale directive. */
case 76:
YY_RULE_SETUP
#line 235 "lexor.lex"
{ BEGIN(PPTIMESCALE); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 236 "lexor.lex"
{ process_timescale(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 237 "lexor.lex"
{
      yylloc.first_line += 1;
      BEGIN(0); }
	YY_BREAK
/* These are directives that I do not yet support. I think that IVL
     should handle these, not an external preprocessor. */
case 79:
YY_RULE_SETUP
#line 245 "lexor.lex"
{  }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 246 "lexor.lex"
{  }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 247 "lexor.lex"
{  }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 248 "lexor.lex"
{  }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 249 "lexor.lex"
{  }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 250 "lexor.lex"
{  }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 251 "lexor.lex"
{  }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 252 "lexor.lex"
{  }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 253 "lexor.lex"
{  }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 254 "lexor.lex"
{  }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 255 "lexor.lex"
{  }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 256 "lexor.lex"
{  }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 257 "lexor.lex"
{  }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 258 "lexor.lex"
{  }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 259 "lexor.lex"
{  }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 260 "lexor.lex"
{  }
	YY_BREAK
/* These are directives that are not supported by me and should have
     been handled by an external preprocessor such as ivlpp. */
case 95:
YY_RULE_SETUP
#line 266 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": `define not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 272 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": `else not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 278 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": `endif not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 284 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": `ifdef not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 290 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": `include not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 296 "lexor.lex"
{
      cerr << yylloc.text << ":" << yylloc.first_line <<
	    ": `undef not supported. Use an external preprocessor."
	   << endl;
  }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 302 "lexor.lex"
{ cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
	    << "Stray tic (`) here. Perhaps you put white space" << endl;
       cerr << yylloc.text << ":" << yylloc.first_line << ":      : "
	    << "between the tic and preprocessor directive?"
	    << endl;
       error_count += 1; }
	YY_BREAK
/* Final catchall. something got lost or mishandled. */
case 102:
YY_RULE_SETUP
#line 311 "lexor.lex"
{   cerr << yylloc.text << ":" << yylloc.first_line
	   << ": error: unmatched character (";
      if (isgraph(yytext[0]))
	    cerr << yytext[0];
      else
	    cerr << "hex " << hex << (0xffU & ((unsigned) (yytext[0])));

      cerr << ")" << endl;
      error_count += 1; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 321 "lexor.lex"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1721 "lexor.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CCOMMENT):
case YY_STATE_EOF(PCOMMENT):
case YY_STATE_EOF(LCOMMENT):
case YY_STATE_EOF(CSTRING):
case YY_STATE_EOF(UDPTABLE):
case YY_STATE_EOF(PPTIMESCALE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 458 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 458 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 457);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 321 "lexor.lex"


/*
 * The UDP state table needs some slightly different treatment by the
 * lexor. The level characters are normally accepted as other things,
 * so the parser needs to switch my mode when it believes in needs to.
 */
void lex_start_table()
{
      BEGIN(UDPTABLE);
}

void lex_end_table()
{
      BEGIN(INITIAL);
}

static verinum*make_unsized_binary(const char*txt)
{
      bool sign_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }

      assert(tolower(*ptr) == 'b');
      ptr += 1;

      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*cidx = ptr ;  *cidx ;  cidx += 1)
	    if (*cidx != '_') size += 1;

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    switch (ptr[0]) {
		case '0':
		  bits[--idx] = verinum::V0;
		  break;
		case '1':
		  bits[--idx] = verinum::V1;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  break;
		  case '_':
		  break;
		default:
		  fprintf(stderr, "%c\n", ptr[0]);
		  assert(0);
	    }
	    ptr += 1;
      }

      verinum*out = new verinum(bits, size);
      out->has_sign(sign_flag);
      delete[]bits;
      return out;
}


static verinum*make_unsized_octal(const char*txt)
{
      bool sign_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }

      assert(tolower(*ptr) == 'o');
      ptr += 1;

      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*cidx = ptr ;  *cidx ;  cidx += 1)
	    if (*cidx != '_') size += 3;

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    unsigned val;
	    switch (ptr[0]) {
		case '0': case '1': case '2': case '3':
		case '4': case '5': case '6': case '7':
		  val = *ptr - '0';
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  break;
		case '_':
		  break;
		default:
		  assert(0);
	    }
	    ptr += 1;
      }

      verinum*out = new verinum(bits, size);
      out->has_sign(sign_flag);
      delete[]bits;
      return out;
}


static verinum*make_unsized_hex(const char*txt)
{
      bool sign_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }
      assert(tolower(*ptr) == 'h');

      ptr += 1;
      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*cidx = ptr ;  *cidx ;  cidx += 1)
	    if (*cidx != '_') size += 4;

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    unsigned val;
	    switch (ptr[0]) {
		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
		  val = *ptr - '0';
		  bits[--idx] = (val&8) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
		case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
		  val = tolower(*ptr) - 'a' + 10;
		  bits[--idx] = (val&8) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  break;
		case '_':
		  break;
		default:
		  assert(0);
	    }
	    ptr += 1;
      }

      verinum*out = new verinum(bits, size);
      out->has_sign(sign_flag);
      delete[]bits;
      return out;
}


/* Divide the integer given by the string by 2. Return the remainder bit. */
static int dec_buf_div2(char *buf)
{
    int partial;
    int len = strlen(buf);
    char *dst_ptr;
    int pos;

    partial = 0;
    pos = 0;

    /* dst_ptr overwrites buf, but all characters that are overwritten
       were already used by the reader. */
    dst_ptr = buf;

    while(buf[pos] == '0')
	++pos;

    for(; pos<len; ++pos){
	if (buf[pos]=='_')
	    continue;

	assert(isdigit(buf[pos]));

	partial= partial*10 + (buf[pos]-'0');

	if (partial >= 2){
	    *dst_ptr = partial/2 + '0';
	    partial = partial & 1;

	    ++dst_ptr;
	}
	else{
	    *dst_ptr = '0';
	    ++dst_ptr;
	}
    }

    // If result of division was zero string, it should remain that way.
    // Don't eat the last zero...
    if (dst_ptr == buf){
	*dst_ptr = '0';
	++dst_ptr;
    }
    *dst_ptr = 0;

    return partial;
}

/*
 * Making a decimal number is much easier then the other base numbers
 * because there are no z or x values to worry about. It is much
 * harder then other base numbers because the width needed in bits is
 * hard to calculate.
 */

static verinum*make_unsized_dec(const char*ptr)
{
      char buf[4096];
      bool signed_flag = false;
      unsigned idx;

      if (ptr[0] == '\'') {
	      /* The number has decorations of the form 'sd<digits>,
		 possibly with space between the d and the <digits>.
		 Also, the 's' is optional, and markes the number as
		 signed. */
	    ptr += 1;

	    if (tolower(*ptr) == 's') {
		  signed_flag = true;
		  ptr += 1;
	    }

	    assert(tolower(*ptr) == 'd');
	    ptr += 1;

	    while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
		  ptr += 1;

      } else {
	      /* ... or an undecorated decimal number is passed
		 it. These numbers are treated as signed decimal. */
	    assert(isdigit(*ptr));
	    signed_flag = true;
      }


	/* Copy the digits into a buffer that I can use to do in-place
	   decimal divides. */
      idx = 0;
      while ((idx < sizeof buf) && (*ptr != 0)) {
	    if (*ptr == '_') {
		  ptr += 1;
		  continue;
	    }

	    buf[idx++] = *ptr++;
      }

      if (idx == sizeof buf) {
	    fprintf(stderr, "Ridiculously long"
		    " decimal constant will be truncated!\n");
	    idx -= 1;
      }

      buf[idx] = 0;
      unsigned tmp_size = idx * 4 + 1;
      verinum::V *bits = new verinum::V[tmp_size];

      idx = 0;
      while (idx < tmp_size) {
	    int rem = dec_buf_div2(buf);
	    bits[idx++] = (rem == 1) ? verinum::V1 : verinum::V0;
      }

      assert(strcmp(buf, "0") == 0);

	/* Now calculate the minimum number of bits needed to
	   represent this unsigned number. */
      unsigned size = tmp_size;
      while ((size > 1) && (bits[size-1] == verinum::V0))
	    size -= 1;

	/* Now account for the signedness. Don't leave a 1 in the high
	   bit if this is a signed number. */
      if (signed_flag && (bits[size-1] == verinum::V1)) {
	    size += 1;
	    assert(size <= tmp_size);
      }

      verinum*res = new verinum(bits, size, false);
      res->has_sign(signed_flag);

      delete[]bits;
      return res;
}


/*
 * The timescale parameter has the form:
 *      " <num> xs / <num> xs"
 */
static void process_timescale(const char*txt)
{
      unsigned num;
      const char*cp = txt + strspn(txt, " \t");
      char*tmp;
      const char*ctmp;

      int unit = 0;
      int prec = 0;

      num = strtoul(cp, &tmp, 10);
      if (num == 0) {
	    VLerror(yylloc, "Invalid timescale string.");
	    return;
      }

      while (num >= 10) {
	    unit += 1;
	    num  /= 10;
      }
      if (num != 1) {
	    VLerror(yylloc, "Invalid timescale unit number.");
	    return;
      }

      cp = tmp;
      cp += strspn(cp, " \t");
      ctmp = cp + strcspn(cp, " \t/");

      if (strncmp("s", cp, ctmp-cp) == 0) {
	    unit -= 0;

      } else if (strncmp("ms", cp, ctmp-cp) == 0) {
	    unit -= 3;

      } else if (strncmp("us", cp, ctmp-cp) == 0) {
	    unit -= 6;

      } else if (strncmp("ns", cp, ctmp-cp) == 0) {
	    unit -= 9;

      } else if (strncmp("ps", cp, ctmp-cp) == 0) {
	    unit -= 12;

      } else if (strncmp("fs", cp, ctmp-cp) == 0) {
	    unit -= 15;

      } else {
	    VLerror(yylloc, "Invalid timescale unit of measurement");
	    return;
      }

      cp = ctmp;
      cp += strspn(cp, " \t/");

      num = strtoul(cp, &tmp, 10);
      if (num == 0) {
	    VLerror(yylloc, "Invalid timescale string.");
	    return;
      }
      assert(num);
      while (num >= 10) {
	    prec += 1;
	    num  /= 10;
      }
      if (num != 1) {
	    VLerror(yylloc, "Invalid timescale precision number.");
	    return;
      }

      cp = tmp;
      cp += strspn(cp, " \t");
      ctmp = cp + strcspn(cp, " \t\r");

      if (strncmp("s", cp, ctmp-cp) == 0) {
	    prec -= 0;

      } else if (strncmp("ms", cp, ctmp-cp) == 0) {
	    prec -= 3;

      } else if (strncmp("us", cp, ctmp-cp) == 0) {
	    prec -= 6;

      } else if (strncmp("ns", cp, ctmp-cp) == 0) {
	    prec -= 9;

      } else if (strncmp("ps", cp, ctmp-cp) == 0) {
	    prec -= 12;

      } else if (strncmp("fs", cp, ctmp-cp) == 0) {
	    prec -= 15;

      } else {
	    VLerror(yylloc, "Invalid timescale precision units of measurement");
	    return;
      }

      pform_set_timescale(unit, prec, yylloc.text, yylloc.first_line);
}

int yywrap()
{
      return 1;
}

/*
 * The line directive matches lines of the form #line "foo" N and
 * calls this function. Here I parse out the file name and line
 * number, and change the yylloc to suite.
 */
static void line_directive()
{
      char*qt1 = strchr(yytext, '"');
      assert(qt1);
      qt1 += 1;

      char*qt2 = strchr(qt1, '"');
      assert(qt2);

      char*buf = new char[qt2-qt1+1];
      strncpy(buf, qt1, qt2-qt1);
      buf[qt2-qt1] = 0;

      yylloc.text = set_file_name(buf);

      qt2 += 1;
      yylloc.first_line = strtoul(qt2,0,0);
}

static void line_directive2()
{
      assert(strncmp(yytext,"`line",5) == 0);
      char*cp = yytext + strlen("`line");
      cp += strspn(cp, " ");
      yylloc.first_line = strtoul(cp,&cp,10);

      yylloc.first_line -= 1;

      cp += strspn(cp, " ");
      if (*cp == 0) return;

      char*qt1 = strchr(yytext, '"');
      assert(qt1);
      qt1 += 1;

      char*qt2 = strchr(qt1, '"');
      assert(qt2);

      char*buf = new char[qt2-qt1+1];
      strncpy(buf, qt1, qt2-qt1);
      buf[qt2-qt1] = 0;

      yylloc.text = set_file_name(buf);
}

extern FILE*vl_input;
void reset_lexor()
{
      yyrestart(vl_input);
      yylloc.first_line = 1;

	/* Start the file_names list. From here on, as I get a file
	   name, I will add it to this list. Only add the name if it
	   is not already in the list. */
      file_names = new struct file_name_cell;
      file_names->text = strdup(vl_file.c_str());
      file_names->next = 0;
      yylloc.text = file_names->text;
}
